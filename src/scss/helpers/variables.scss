// Контрольные точки;
$breakpointsPhone:             400px;
$breakpointsPhoneWide:         480px;
$breakpointsPhablet:           540px;
$breakpointsTabletSmall:       640px;
$breakpointsTablet:            768px;
$breakpointsTabletWide:        992px;
$breakpointsDesktop:           1200px;
$breakpointsDesktopWideMd:     1450px;
$breakpointsDesktopWide:       1600px;

$xlg: $breakpointsDesktopWide;
$lg: $breakpointsDesktopWideMd;
$md: $breakpointsDesktop;
$sm: $breakpointsTabletWide;
$xs: $breakpointsTabletSmall;
$xxs: $breakpointsPhoneWide;

$breakpoints: (
  "phone":        $breakpointsPhone,
  "phone-wide":   $breakpointsPhoneWide,
  "phablet":      $breakpointsPhablet,
  "tablet-small": $breakpointsTabletSmall,
  "tablet":       $breakpointsTablet,
  "tablet-wide":  $breakpointsTabletWide,
  "desktop":      $breakpointsDesktop,
  "desktop-wide-md":      $breakpointsDesktopWideMd,
  "desktop-wide": $breakpointsDesktopWide
);

// Цвета на сайте

$white: #FFF;
$black: #000;
$red: #E01919;

$gray10: scale-color($black,$lightness:10%); // 1a1a1a

$text-green-dark: #102E25;
$text-form: #3B3B3B;
$color-amount: #102E25;
$color-price: #53392D;
$green: #245E63;
$green-dark: #1E565A;
$blue-dark: #2F6283;
$icon-green: #95BAB9;
$form-blue: #51BCC3;
$ultra-marine: #5DD6C7;
$blue: #B5E0E3;
$link: #F4A528;
$yellow: #EFBC59;
$gray: #A6B4BC;
$gray-dark: #C7D3DA;
$icon-bg-directory: #C9DCE9;
$gray-devider: #D7DCE7;
$bg-directory: #DAE8F1;
$gray-bg: #F6F9FF;
$link-footer: #AACABD;
$directory-ellipse: #C9DCE9;
$form-input-bg: #ECF3F8;

$cards-bg: 4px 4px 15px rgba(92, 109, 116, 0.12);
$ellipse-bg: 2px 2px 8px rgba(92, 109, 116, 0.1);


$gradient-to-white: linear-gradient(90deg, rgba($white,0) 0%, $white 100%);

$mobileBrackpoints: 'tablet';

$enable-grid-classes: true !default;

$grid-breakpoints: (
  xxxs: 0,
  xl: $xlg,
  lg: $lg,
  md: $md,
  sm: $sm,
  xs: $xs,
  xxs: $xxs
) !default;

// Grids
$grid-columns:              12;
$grid-gutter-width:         30px;
$baseFontF: 'Fira Sans', 'Arial', sans-serif;
$headlineFontF: 'Fira Sans', 'Arial', sans-serif;

$titleFF: $headlineFontF;

$baseFS: 14px !default;
$baseLH: ( 25px / $baseFS );
$baseFW: 500;
$baseFSt: normal;
$baseFF: $baseFontF;
$baseFClr: $text-green-dark; 
$baseBg: $white;

$family: $baseFF;

$containerW: 1230px;
$containerP: $grid-gutter-width/2;

$baseLinkColor: inherit;
$baseLinkColorHover: inherit;

$fs-14: 14px/1.4 $family;
$fs-14-500: 500 14px/1.4 $family;
$fs-14-bold: 500 14px/1.4 $family;
$fs-link: $fs-14-bold;
$fs-16: 16px/1.3 $family;
$fs-16-500: 500 16px/1.3 $family;
$fs-16-bold: bold 16px/1.3 $family;
$fs-18: 18px/1.3 $family;
$fs-18-bold: bold 18px/1.3 $family; 
$fs-card: 600 20px/1.3 $family;
$fs-news: $fs-card;
$fs-name: bold 22px/1.4 $family;

// Ascending
// Used to evaluate Sass maps like our grid breakpoints. 
@mixin assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num < $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero
// Another grid mixin that ensures the min-width of the lowest breakpoint starts at 0.
@mixin assert-starts-at-zero($map) { 
  $values: map-values($map);
  $first-value: nth($values, 1);
  @if $first-value != 0 {
    @warn "First breakpoint in `$grid-breakpoints` must start at 0, but starts at #{$first-value}.";
  }
} 

@include assert-starts-at-zero($grid-breakpoints);




